#!/usr/bin/env python3
import subprocess
from flask import Flask, render_template_string, request, jsonify
import threading
import sys
import time

import os
import pyinotify

app = Flask(__name__)

LOG_FILE = "/var/log/messages"

def parse_log_line(line):
    parts = line.rstrip('\n').split('|', 7)
    while len(parts) < 8:
        parts.append("")
    return tuple(parts)

realtime_lines = []
realtime_lock = threading.Lock()
MAX_LINES = 100

def tail_logfile_realtime(path):
    """
    Waits until 'path' exists, then fills 'realtime_lines' with the tail, then watches for changes.
    """
    global realtime_lines
    wm = pyinotify.WatchManager()
    mask = pyinotify.IN_MODIFY

    # Wait for log file to exist before attaching pyinotify
    while not os.path.exists(path):
        time.sleep(0.5)

    def get_tail():
        try:
            with open(path) as f:
                lines = f.readlines()[-MAX_LINES:]
                return [parse_log_line(line) for line in lines]
        except Exception as e:
            return [("Error", "", "", "", "", "", "", str(e))]
    with realtime_lock:
        realtime_lines[:] = get_tail()

    class EventHandler(pyinotify.ProcessEvent):
        def process_IN_MODIFY(self, event):
            try:
                with open(path) as f:
                    f.seek(0, os.SEEK_END)
                    size = f.tell()
                    read_size = 20480
                    f.seek(max(0, size - read_size))
                    data = f.read()
                    lines = data.splitlines()[-MAX_LINES:]
                    parsed = [parse_log_line(line) for line in lines]
                    with realtime_lock:
                        realtime_lines[:] = parsed
            except Exception as e:
                with realtime_lock:
                    realtime_lines[:] = [("Error", "", "", "", "", "", "", str(e))]

    handler = EventHandler()
    notifier = pyinotify.ThreadedNotifier(wm, handler)
    notifier.start()
    wm.add_watch(path, mask)
    while True:
        time.sleep(1)

def get_unique_values(rows, col_idx):
    return sorted(set(row[col_idx] for row in rows if row[col_idx]))

def start_syslog_ng():
    process = subprocess.Popen(
        ["/usr/sbin/syslog-ng", "-F", "--no-caps", "--verbose"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1
    )
    for line in process.stdout:
        print(f"[syslog-ng] {line}", end='', file=sys.stdout, flush=True)

TEMPLATE = '''
<!doctype html>
<html>
  <head>
    <title>Log Table Viewer</title>
    <style>
      table { border-collapse: collapse; width: 100%; }
      th, td { border: 1px solid #ccc; padding: 4px; font-family: monospace; }
      th { background: #eee; }
      tr:nth-child(even) { background: #f9f9f9; }
      select { font-family: monospace; }
      form.inline { display: inline; margin: 0; }
      #refresh-bar { margin-bottom: 1em; }
    </style>
    <script>
      var refreshTimer = null;
      function setRefreshInterval() {
        var freq = document.getElementById('refresh_select').value;
        if (refreshTimer) clearInterval(refreshTimer);
        if (freq && freq != "off") {
          refreshTimer = setInterval(function() {
            let url = new URL(window.location.href);
            url.searchParams.set('refresh', freq);
            window.location.href = url.toString();
          }, parseInt(freq));
        }
      }
      function setRealtime(checked) {
        let url = new URL(window.location.href);
        if (checked) {
          url.searchParams.set('realtime', 'on');
          url.searchParams.delete('refresh');
        } else {
          url.searchParams.set('realtime', 'off');
        }
        window.location.href = url.toString();
      }

      function pollRealtime() {
        {% if realtime %}
        function fetchAndUpdate() {
          fetch("{{ url_for('realtime_api') }}?{{ request.query_string.decode('utf-8') }}")
            .then(resp => resp.json())
            .then(data => {
              var tbody = document.getElementById('log-tbody');
              tbody.innerHTML = '';
              data.rows.forEach(function(row) {
                var tr = document.createElement('tr');
                row.forEach(function(col) {
                  var td = document.createElement('td');
                  td.textContent = col;
                  tr.appendChild(td);
                });
                tbody.appendChild(tr);
              });
              document.getElementById('total_rows').textContent = data.total_rows;
            });
        }
        setInterval(fetchAndUpdate, 1000);
        {% endif %}
      }
      window.onload = function() {
        var freq = "{{ refresh|default('off') }}";
        if (freq && freq != "off" && "{{ not realtime }}") {
          setRefreshInterval();
        }
        pollRealtime();
      }
    </script>
  </head>
  <body>
    <div id="refresh-bar">
      <form method="get" class="inline">
        {% for param in ['host','facility','level','program','pid'] %}
          {% if request.args.get(param) %}
          <input type="hidden" name="{{ param }}" value="{{ request.args.get(param) }}">
          {% endif %}
        {% endfor %}
        <label for="refresh_select">Refresh frequency:</label>
        <select id="refresh_select" name="refresh" onchange="this.form.submit(); setRefreshInterval();" {% if realtime %}disabled{% endif %}>
          <option value="off" {% if refresh == "off" %}selected{% endif %}>Off</option>
          <option value="2000" {% if refresh == "2000" %}selected{% endif %}>2 sec</option>
          <option value="5000" {% if refresh == "5000" %}selected{% endif %}>5 sec</option>
          <option value="10000" {% if refresh == "10000" %}selected{% endif %}>10 sec</option>
          <option value="30000" {% if refresh == "30000" %}selected{% endif %}>30 sec</option>
          <option value="60000" {% if refresh == "60000" %}selected{% endif %}>1 min</option>
        </select>
        <label for="realtime_check">Realtime (pyinotify):</label>
        <input type="checkbox" id="realtime_check" name="realtime" value="on" {% if realtime %}checked{% endif %} onchange="setRealtime(this.checked)">
      </form>
    </div>
    <form method="get">
      <table>
        <tr>
          <th>ISODATE</th>
          <th>SEQ</th>
          <th>
            <form method="get" class="inline">
              {% for name, val in [('facility', selected_facility), ('level', selected_level), ('program', selected_program), ('pid', selected_pid)] %}
                {% if val %}<input type="hidden" name="{{ name }}" value="{{ val }}">{% endif %}
              {% endfor %}
              <select name="host" onchange="this.form.submit()">
                <option value="">[All Hosts]</option>
                {% for v in hosts %}
                  <option value="{{ v }}" {% if v == selected_host %}selected{% endif %}>{{ v }}</option>
                {% endfor %}
              </select>
            </form>
          </th>
          <th>
            <form method="get" class="inline">
              {% for name, val in [('host', selected_host), ('level', selected_level), ('program', selected_program), ('pid', selected_pid)] %}
                {% if val %}<input type="hidden" name="{{ name }}" value="{{ val }}">{% endif %}
              {% endfor %}
              <select name="facility" onchange="this.form.submit()">
                <option value="">[All Facilities]</option>
                {% for v in facilities %}
                  <option value="{{ v }}" {% if v == selected_facility %}selected{% endif %}>{{ v }}</option>
                {% endfor %}
              </select>
            </form>
          </th>
          <th>
            <form method="get" class="inline">
              {% for name, val in [('host', selected_host), ('facility', selected_facility), ('program', selected_program), ('pid', selected_pid)] %}
                {% if val %}<input type="hidden" name="{{ name }}" value="{{ val }}">{% endif %}
              {% endfor %}
              <select name="level" onchange="this.form.submit()">
                <option value="">[All Levels]</option>
                {% for v in levels %}
                  <option value="{{ v }}" {% if v == selected_level %}selected{% endif %}>{{ v }}</option>
                {% endfor %}
              </select>
            </form>
          </th>
          <th>
            <form method="get" class="inline">
              {% for name, val in [('host', selected_host), ('facility', selected_facility), ('level', selected_level), ('pid', selected_pid)] %}
                {% if val %}<input type="hidden" name="{{ name }}" value="{{ val }}">{% endif %}
              {% endfor %}
              <select name="program" onchange="this.form.submit()">
                <option value="">[All Programs]</option>
                {% for v in programs %}
                  <option value="{{ v }}" {% if v == selected_program %}selected{% endif %}>{{ v }}</option>
                {% endfor %}
              </select>
            </form>
          </th>
          <th>
            <form method="get" class="inline">
              {% for name, val in [('host', selected_host), ('facility', selected_facility), ('level', selected_level), ('program', selected_program)] %}
                {% if val %}<input type="hidden" name="{{ name }}" value="{{ val }}">{% endif %}
              {% endfor %}
              <select name="pid" onchange="this.form.submit()">
                <option value="">[All PIDs]</option>
                {% for v in pids %}
                  <option value="{{ v }}" {% if v == selected_pid %}selected{% endif %}>{{ v }}</option>
                {% endfor %}
              </select>
            </form>
          </th>
          <th>MSGONLY</th>
        </tr>
        <tbody id="log-tbody">
        {% for row in rows %}
        <tr>
          {% for col in row %}
            <td>{{ col }}</td>
          {% endfor %}
        </tr>
        {% endfor %}
        </tbody>
      </table>
      <div>
        <b>Total log lines loaded: <span id="total_rows">{{ total_rows }}</span></b>
      </div>
    </form>
    <script>pollRealtime();</script>
  </body>
</html>
'''

@app.route('/')
def show_log_table():
    log_rows = []
    realtime = request.args.get('realtime', 'off') == 'on'
    selected_host = request.args.get('host', '')
    selected_facility = request.args.get('facility', '')
    selected_level = request.args.get('level', '')
    selected_program = request.args.get('program', '')
    selected_pid = request.args.get('pid', '')
    refresh = request.args.get('refresh', 'off')

    if realtime:
        with realtime_lock:
            log_rows = list(realtime_lines)
    else:
        try:
            with open(LOG_FILE) as f:
                for line in f.readlines()[-MAX_LINES:]:
                    log_rows.append(parse_log_line(line))
        except Exception as e:
            log_rows = [("Error", "", "", "", "", "", "", str(e))]

    filtered = log_rows
    if selected_host:
        filtered = [r for r in filtered if r[2] == selected_host]
    if selected_facility:
        filtered = [r for r in filtered if r[3] == selected_facility]
    if selected_level:
        filtered = [r for r in filtered if r[4] == selected_level]
    if selected_program:
        filtered = [r for r in filtered if r[5] == selected_program]
    if selected_pid:
        filtered = [r for r in filtered if r[6] == selected_pid]

    hosts = [v for v in get_unique_values(log_rows, 2) if v]
    facilities = [v for v in get_unique_values(log_rows, 3) if v]
    levels = [v for v in get_unique_values(log_rows, 4) if v]
    programs = [v for v in get_unique_values(log_rows, 5) if v]
    pids = [v for v in get_unique_values(log_rows, 6) if v]

    return render_template_string(
        TEMPLATE,
        rows=filtered,
        total_rows=len(log_rows),
        hosts=hosts,
        facilities=facilities,
        levels=levels,
        programs=programs,
        pids=pids,
        selected_host=selected_host,
        selected_facility=selected_facility,
        selected_level=selected_level,
        selected_program=selected_program,
        selected_pid=selected_pid,
        refresh=refresh,
        realtime=realtime,
        request=request
    )

@app.route('/realtime_api')
def realtime_api():
    selected_host = request.args.get('host', '')
    selected_facility = request.args.get('facility', '')
    selected_level = request.args.get('level', '')
    selected_program = request.args.get('program', '')
    selected_pid = request.args.get('pid', '')

    with realtime_lock:
        log_rows = list(realtime_lines)
    filtered = log_rows
    if selected_host:
        filtered = [r for r in filtered if r[2] == selected_host]
    if selected_facility:
        filtered = [r for r in filtered if r[3] == selected_facility]
    if selected_level:
        filtered = [r for r in filtered if r[4] == selected_level]
    if selected_program:
        filtered = [r for r in filtered if r[5] == selected_program]
    if selected_pid:
        filtered = [r for r in filtered if r[6] == selected_pid]

    return jsonify({
        "rows": filtered,
        "total_rows": len(log_rows)
    })

def start_realtime_thread():
    thread = threading.Thread(target=tail_logfile_realtime, args=(LOG_FILE,), daemon=True)
    thread.start()

if __name__ == '__main__':
    threading.Thread(target=start_syslog_ng, daemon=True).start()
    start_realtime_thread()
    app.run(host='0.0.0.0', port=7321)
