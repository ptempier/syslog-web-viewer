#!/usr/bin/env python3
import subprocess
from flask import Flask, render_template_string, request, jsonify, redirect, url_for
import threading
import sys
import time
import os
import pyinotify

app = Flask(__name__)

LOG_FILE = "/var/log/messages"

def parse_log_line(line):
    parts = line.rstrip('\n').split('|', 7)
    while len(parts) < 8:
        parts.append("")
    return tuple(parts)

realtime_lines = []
realtime_lock = threading.Lock()

NUM_LINES_OPTIONS = [10, 20, 30, 40, 50, 60, 80, 100]
DEFAULT_NUM_LINES = 30

def tail_logfile_realtime(path, default_num_lines=DEFAULT_NUM_LINES):
    global realtime_lines
    wm = pyinotify.WatchManager()
    mask = pyinotify.IN_MODIFY

    while not os.path.exists(path):
        time.sleep(0.5)

    def get_tail(num_lines):
        try:
            with open(path) as f:
                lines = f.readlines()[-num_lines:]
                return [parse_log_line(line) for line in lines]
        except Exception as e:
            return [("Error", "", "", "", "", "", "", str(e))]
    with realtime_lock:
        realtime_lines[:] = get_tail(default_num_lines)

    class EventHandler(pyinotify.ProcessEvent):
        def process_IN_MODIFY(self, event):
            try:
                with open(path) as f:
                    f.seek(0, os.SEEK_END)
                    size = f.tell()
                    read_size = 20480
                    f.seek(max(0, size - read_size))
                    data = f.read()
                    lines = data.splitlines()[-default_num_lines:]
                    parsed = [parse_log_line(line) for line in lines]
                    with realtime_lock:
                        realtime_lines[:] = parsed
            except Exception as e:
                with realtime_lock:
                    realtime_lines[:] = [("Error", "", "", "", "", "", "", str(e))]

    handler = EventHandler()
    notifier = pyinotify.ThreadedNotifier(wm, handler)
    notifier.start()
    wm.add_watch(path, mask)
    while True:
        time.sleep(1)

def get_unique_values(rows, col_idx):
    return sorted(set(row[col_idx] for row in rows if row[col_idx]))

def start_syslog_ng():
    process = subprocess.Popen(
        ["/usr/sbin/syslog-ng", "-F", "--no-caps", "--verbose"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1
    )
    for line in process.stdout:
        print(f"[syslog-ng] {line}", end='', file=sys.stdout, flush=True)

TEMPLATE = '''
<!doctype html>
<html>
<head>
  <title>Log Table Viewer</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html, body {
      margin: 0;
      padding: 0;
      background: #f4f6fa;
      width: 100vw;
      font-size: 22px;
      overflow-x: hidden;
    }
    body {
      font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
      color: #2b2d42;
      min-height: 100vh;
      width: 100vw;
      font-size: 22px;
      overflow-x: hidden;
    }
    header {
      background: #35477d;
      color: #fff;
      padding: 0.9em 0 0.9em 0;
      text-align: left;
      margin-bottom: 0.2em;
      width: 100vw;
      display: flex;
      align-items: center;
      gap: 1.2em;
      font-size: 1.25em;
    }
    header h1 {
      margin: 0 0.5em 0 0.7em;
      font-size: 1.15em;
      font-weight: 700;
      letter-spacing: 1px;
      display: inline-block;
      vertical-align: middle;
    }
    header h2 {
      margin: 0;
      font-size: 1.08em;
      font-weight: 400;
      color: #ffe066;
      display: inline-block;
      vertical-align: middle;
    }
    #main-container {
      width: 100vw;
      max-width: 100vw;
      box-sizing: border-box;
      background: #fff;
      border-radius: 0;
      box-shadow: 0 2px 10px rgba(40,60,80,0.06);
      padding: 0.8em 0.2em 0.8em 0.2em;
      margin-bottom: 2em;
      font-size: 22px;
      overflow-x: hidden;
    }
    .option-bar {
      display: flex;
      align-items: center;
      gap: 1.1em;
      margin-bottom: 1.2em;
      padding: 0.5em 0.5em 0.5em 0.5em;
      background: #e8ecf3;
      border-radius: 7px;
      font-size: 1.07em;
    }
    .option-bar label {
      color: #222a4d;
      font-size: 1em;
      margin-right: 0.3em;
    }
    .option-bar select {
      background: #fff;
      color: #222a4d;
      border: 1.5px solid #a7b5e5;
      font-size: 1em;
    }
    label {
      font-weight: 600;
      color: #35477d;
      margin-right: 0.3em;
      font-size: 1em;
    }
    select, input[type="text"] {
      border: 1px solid #cdd0d9;
      border-radius: 6px;
      padding: 0.22em 0.55em;
      font-size: 1em;
      background: #f7f9fb;
      margin-right: 0.4em;
      margin-bottom: 2px;
      line-height: 1.25em;
      min-width: 0;
      box-sizing: border-box;
    }
    select:focus, input[type="text"]:focus {
      border: 1.5px solid #35477d;
      outline: none;
      background: #fff;
    }
    input[type="submit"] {
      padding: 0.22em 0.7em;
      border-radius: 6px;
      border: none;
      background: #35477d;
      color: #fff;
      font-weight: 600;
      font-size: 1em;
      cursor: pointer;
      transition: background 0.2s;
      margin-bottom: 2px;
      margin-left: 0.3em;
    }
    input[type="submit"]:hover {
      background: #222a4d;
    }
    table {
      border-collapse: collapse;
      width: 100vw;
      max-width: 100vw;
      margin-top: 0.2em;
      table-layout: fixed;
      font-size: 1em;
      overflow-x: auto;
      background: #fff;
    }
    th, td {
      border: none;
      border-right: 1px solid #dedede;
      border-bottom: 1px solid #ededed;
      padding: 3px 8px;
      font-family: "JetBrains Mono", "Roboto Mono", "Consolas", monospace;
      text-align: left;
      background: #fff;
      line-height: 1.22em;
      vertical-align: middle;
      white-space: nowrap;
      font-size: 1em;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    th:last-child, td:last-child { border-right: none; }
    th {
      background: #e8ecf3;
      font-weight: 600;
      font-size: 1em;
      color: #35477d;
      border-bottom: 2px solid #cdd0d9;
      position: sticky;
      top: 0;
      z-index: 1;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    /* Precise column widths for log fields, and MSGONLY takes rest */
    th:nth-child(1), td:nth-child(1) { width: 16.5em; min-width: 16.5em; max-width: 16.5em; }   /* ISODATE: 26 chars */
    th:nth-child(2), td:nth-child(2) { width: 3.5em; min-width: 3.5em; max-width: 3.5em; }      /* SEQ */
    th:nth-child(3), td:nth-child(3) { width: 10.6em; min-width: 10.6em; max-width: 10.6em; }   /* HOST: 16 chars */
    th:nth-child(4), td:nth-child(4) { width: 5.5em; min-width: 5.5em; max-width: 5.5em; }      /* FACILITY */
    th:nth-child(5), td:nth-child(5) { width: 4.3em; min-width: 4.3em; max-width: 4.3em; }      /* LEVEL: 8 chars */
    th:nth-child(6), td:nth-child(6) { width: 10.6em; min-width: 10.6em; max-width: 10.6em; }   /* PROGRAM: 16 chars */
    th:nth-child(7), td:nth-child(7) { width: 3.2em; min-width: 3.2em; max-width: 3.2em; }      /* PID */
    th:nth-child(8), td:nth-child(8) { width: auto; min-width: 60px; max-width: 9999px; white-space: pre-line; }
    /* Filters row */
    .filter-row select, .filter-row input[type="text"] {
      width: 98%;
      box-sizing: border-box;
      padding: 2px 4px;
      margin: 0;
      font-size: 0.95em;
    }
    .filter-row input[type="submit"] {
      width: 90%;
      font-size: 0.95em;
      padding: 0.12em 0.2em;
      margin: 0.2em 0 0.2em 0.2em;
    }
    .filter-row td {
      background: #f4f6fa;
      border-top: 1.5px solid #e4e4e4;
      border-bottom: 1.5px solid #e4e4e4;
      padding: 0;
      vertical-align: middle;
    }
    #total_rows {
      color: #35477d;
      font-weight: 600;
      font-size: 1.1em;
    }
    @media (max-width: 900px) {
      #main-container { padding: 0.3em; }
      th, td { font-size: 0.97em; }
      .option-bar { flex-direction: column; gap: 0.7em; }
    }
    @media (max-width: 600px) {
      table, thead, tbody, th, td, tr {
        display: block;
      }
      th, td {
        padding: 8px 6px;
      }
      th {
        background: #e8ecf3;
        position: static;
      }
    }
  </style>
  <script>
    var refreshTimer = null;
    function getCurrentFilters() {
      // Collect all filter values from the filter bar
      return {
        host: document.getElementById('host_select') ? document.getElementById('host_select').value : "",
        facility: document.getElementById('facility_select') ? document.getElementById('facility_select').value : "",
        level: document.getElementById('level_select') ? document.getElementById('level_select').value : "",
        program: document.getElementById('program_select') ? document.getElementById('program_select').value : "",
        pid: document.getElementById('pid_select') ? document.getElementById('pid_select').value : "",
        refresh: document.getElementById('refresh_select') ? document.getElementById('refresh_select').value : "",
        num_lines: document.getElementById('num_lines_select') ? document.getElementById('num_lines_select').value : "",
        msgonly_filter: document.getElementById('msgonly_filter') ? document.getElementById('msgonly_filter').value : "",
      };
    }
    function buildUrlWithFilters(extra) {
      // Keep all filters in URL
      var url = new URL(window.location.href.split('?')[0], window.location.origin);
      var filters = getCurrentFilters();
      for (const [key, val] of Object.entries(filters)) {
        if (val && (val !== "off" || key === "refresh")) {
          url.searchParams.set(key, val);
        }
      }
      if (extra) {
        for (const [key, val] of Object.entries(extra)) {
          url.searchParams.set(key, val);
        }
      }
      return url.toString();
    }
    function setRefreshInterval() {
      var freq = document.getElementById('refresh_select').value;
      if (refreshTimer) clearInterval(refreshTimer);
      if (freq && freq != "off" && freq != "realtime") {
        refreshTimer = setInterval(function() {
          window.location.href = buildUrlWithFilters();
        }, parseInt(freq));
      }
      if (freq === "realtime") {
        window.location.href = buildUrlWithFilters({realtime: "on", refresh: ""});
      } else {
        // Remove realtime from url if not realtime
        var url = buildUrlWithFilters({realtime: ""});
        window.history.replaceState(null, "", url);
      }
    }
    function setNumLines() {
      window.location.href = buildUrlWithFilters();
    }
    function pollRealtime() {
      {% if realtime %}
      function fetchAndUpdate() {
        fetch("{{ url_for('realtime_api') }}?{{ request.query_string.decode('utf-8') }}")
          .then(resp => resp.json())
          .then(data => {
            var tbody = document.getElementById('log-tbody');
            tbody.innerHTML = '';
            data.rows.forEach(function(row) {
              var tr = document.createElement('tr');
              row.forEach(function(col, idx) {
                var td = document.createElement('td');
                td.textContent = col;
                tr.appendChild(td);
              });
              tbody.appendChild(tr);
            });
            document.getElementById('total_rows').textContent = data.total_rows;
          });
      }
      setInterval(fetchAndUpdate, 1000);
      {% endif %}
    }
    function filterFormSubmit(e) {
      // Compose all filter values into the URL and submit
      e.preventDefault();
      window.location.href = buildUrlWithFilters();
    }
    window.onload = function() {
      var freq = "{{ refresh|default('off') }}";
      {% if not realtime %}
      if (freq && freq != "off" && freq != "realtime") setRefreshInterval();
      {% endif %}
      pollRealtime();
    }
  </script>
</head>
<body>
<header>
  <h1>Syslog Web Viewer</h1>
  <h2>/var/log/messages</h2>
</header>
<div id="main-container">
  <div class="option-bar">
    <label for="num_lines_select">Lines:</label>
    <select id="num_lines_select" name="num_lines" onchange="window.location.href=buildUrlWithFilters();">
      {% for val in num_lines_options %}
        <option value="{{ val }}" {% if num_lines == val %}selected{% endif %}>{{ val }}</option>
      {% endfor %}
    </select>
    <label for="refresh_select">Refresh:</label>
    <select id="refresh_select" name="refresh" onchange="setRefreshInterval();">
      <option value="off" {% if refresh == "off" %}selected{% endif %}>Off</option>
      <option value="2000" {% if refresh == "2000" %}selected{% endif %}>2 sec</option>
      <option value="5000" {% if refresh == "5000" %}selected{% endif %}>5 sec</option>
      <option value="10000" {% if refresh == "10000" %}selected{% endif %}>10 sec</option>
      <option value="30000" {% if refresh == "30000" %}selected{% endif %}>30 sec</option>
      <option value="60000" {% if refresh == "60000" %}selected{% endif %}>1 min</option>
      <option value="realtime" {% if realtime %}selected{% endif %}>Realtime</option>
    </select>
  </div>
  <form method="get" id="filters-bar" class="inline" onsubmit="filterFormSubmit(event)">
    <!-- keep all filters as hidden for persistence -->
    <input type="hidden" name="refresh" value="{{ refresh }}">
    <input type="hidden" name="num_lines" value="{{ num_lines }}">
    <input type="hidden" name="realtime" value="{{ 'on' if realtime else '' }}">
    <table>
      <thead>
        <tr>
          <th>ISODATE</th>
          <th>SEQ</th>
          <th>HOST</th>
          <th>FACILITY</th>
          <th>LEVEL</th>
          <th>PROGRAM</th>
          <th>PID</th>
          <th>MSGONLY</th>
        </tr>
        <tr class="filter-row">
          <td></td>
          <td></td>
          <td>
            <select id="host_select" name="host" onchange="this.form.submit()">
              <option value="">[All]</option>
              {% for v in hosts %}
                <option value="{{ v }}" {% if v == selected_host %}selected{% endif %}>{{ v }}</option>
              {% endfor %}
            </select>
          </td>
          <td>
            <select id="facility_select" name="facility" onchange="this.form.submit()">
              <option value="">[All]</option>
              {% for v in facilities %}
                <option value="{{ v }}" {% if v == selected_facility %}selected{% endif %}>{{ v }}</option>
              {% endfor %}
            </select>
          </td>
          <td>
            <select id="level_select" name="level" onchange="this.form.submit()">
              <option value="">[All]</option>
              {% for v in levels %}
                <option value="{{ v }}" {% if v == selected_level %}selected{% endif %}>{{ v }}</option>
              {% endfor %}
            </select>
          </td>
          <td>
            <select id="program_select" name="program" onchange="this.form.submit()">
              <option value="">[All]</option>
              {% for v in programs %}
                <option value="{{ v }}" {% if v == selected_program %}selected{% endif %}>{{ v }}</option>
              {% endfor %}
            </select>
          </td>
          <td>
            <select id="pid_select" name="pid" onchange="this.form.submit()">
              <option value="">[All]</option>
              {% for v in pids %}
                <option value="{{ v }}" {% if v == selected_pid %}selected{% endif %}>{{ v }}</option>
              {% endfor %}
            </select>
          </td>
          <td>
            <input type="text" id="msgonly_filter" name="msgonly_filter" value="{{ msgonly_filter|default('') }}" placeholder="Search MSGONLY..." style="width:82%;">
            <input type="submit" value="Filter" style="width:15%;">
          </td>
        </tr>
      </thead>
      <tbody id="log-tbody">
      {% for row in rows %}
      <tr>
        {% for col in row %}
          <td title="{{ col }}">{{ col }}</td>
        {% endfor %}
      </tr>
      {% endfor %}
      </tbody>
    </table>
    <div style="margin-top:0.4em;">
      <b>Total log lines loaded: <span id="total_rows">{{ total_rows }}</span></b>
    </div>
  </form>
</div>
<script>pollRealtime();</script>
</body>
</html>
'''

@app.route('/')
def show_log_table():
    log_rows = []
    realtime = request.args.get('realtime', 'off') == 'on'
    selected_host = request.args.get('host', '')
    selected_facility = request.args.get('facility', '')
    selected_level = request.args.get('level', '')
    selected_program = request.args.get('program', '')
    selected_pid = request.args.get('pid', '')
    refresh = request.args.get('refresh', 'off')
    msgonly_filter = request.args.get('msgonly_filter', '')
    try:
        num_lines = int(request.args.get('num_lines', str(DEFAULT_NUM_LINES)))
    except Exception:
        num_lines = DEFAULT_NUM_LINES
    if num_lines not in NUM_LINES_OPTIONS:
        num_lines = DEFAULT_NUM_LINES

    if realtime:
        with realtime_lock:
            log_rows = list(realtime_lines)[-num_lines:]
    else:
        try:
            with open(LOG_FILE) as f:
                for line in f.readlines()[-num_lines:]:
                    log_rows.append(parse_log_line(line))
        except Exception as e:
            log_rows = [("Error", "", "", "", "", "", "", str(e))]

    filtered = log_rows
    if selected_host:
        filtered = [r for r in filtered if r[2] == selected_host]
    if selected_facility:
        filtered = [r for r in filtered if r[3] == selected_facility]
    if selected_level:
        filtered = [r for r in filtered if r[4] == selected_level]
    if selected_program:
        filtered = [r for r in filtered if r[5] == selected_program]
    if selected_pid:
        filtered = [r for r in filtered if r[6] == selected_pid]
    if msgonly_filter:
        filtered = [r for r in filtered if msgonly_filter.lower() in r[7].lower()]

    hosts = [v for v in get_unique_values(log_rows, 2) if v]
    facilities = [v for v in get_unique_values(log_rows, 3) if v]
    levels = [v for v in get_unique_values(log_rows, 4) if v]
    programs = [v for v in get_unique_values(log_rows, 5) if v]
    pids = [v for v in get_unique_values(log_rows, 6) if v]

    return render_template_string(
        TEMPLATE,
        rows=filtered,
        total_rows=len(log_rows),
        hosts=hosts,
        facilities=facilities,
        levels=levels,
        programs=programs,
        pids=pids,
        selected_host=selected_host,
        selected_facility=selected_facility,
        selected_level=selected_level,
        selected_program=selected_program,
        selected_pid=selected_pid,
        refresh=refresh,
        realtime=realtime,
        num_lines=num_lines,
        num_lines_options=NUM_LINES_OPTIONS,
        msgonly_filter=msgonly_filter,
        request=request
    )

@app.route('/realtime_api')
def realtime_api():
    selected_host = request.args.get('host', '')
    selected_facility = request.args.get('facility', '')
    selected_level = request.args.get('level', '')
    selected_program = request.args.get('program', '')
    selected_pid = request.args.get('pid', '')
    msgonly_filter = request.args.get('msgonly_filter', '')
    try:
        num_lines = int(request.args.get('num_lines', str(DEFAULT_NUM_LINES)))
    except Exception:
        num_lines = DEFAULT_NUM_LINES
    if num_lines not in NUM_LINES_OPTIONS:
        num_lines = DEFAULT_NUM_LINES

    with realtime_lock:
        log_rows = list(realtime_lines)[-num_lines:]
    filtered = log_rows
    if selected_host:
        filtered = [r for r in filtered if r[2] == selected_host]
    if selected_facility:
        filtered = [r for r in filtered if r[3] == selected_facility]
    if selected_level:
        filtered = [r for r in filtered if r[4] == selected_level]
    if selected_program:
        filtered = [r for r in filtered if r[5] == selected_program]
    if selected_pid:
        filtered = [r for r in filtered if r[6] == selected_pid]
    if msgonly_filter:
        filtered = [r for r in filtered if msgonly_filter.lower() in r[7].lower()]

    hosts = [v for v in get_unique_values(log_rows, 2) if v]
    facilities = [v for v in get_unique_values(log_rows, 3) if v]
    levels = [v for v in get_unique_values(log_rows, 4) if v]
    programs = [v for v in get_unique_values(log_rows, 5) if v]
    pids = [v for v in get_unique_values(log_rows, 6) if v]

    return jsonify({
        "rows": filtered,
        "total_rows": len(log_rows),
        "filters": {
            "hosts": hosts,
            "facilities": facilities,
            "levels": levels,
            "programs": programs,
            "pids": pids,
        }
    })

def start_realtime_thread():
    thread = threading.Thread(target=tail_logfile_realtime, args=(LOG_FILE,DEFAULT_NUM_LINES), daemon=True)
    thread.start()

if __name__ == '__main__':
    threading.Thread(target=start_syslog_ng, daemon=True).start()
    start_realtime_thread()
    app.run(host='0.0.0.0', port=7321)
