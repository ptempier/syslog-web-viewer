#!/usr/bin/env python3
import subprocess
from flask import Flask, render_template, request, jsonify
import sys
from multiprocessing.connection import Client
from conf import SOCKET_PATH, NUM_LINES_OPTIONS, DEFAULT_NUM_LINES

app = Flask(__name__, template_folder=".")

def fetch_log_array():
    try:
        conn = Client(SOCKET_PATH, 'AF_UNIX')
        conn.send("get_lines")
        arr = conn.recv()
        conn.close()
        return arr
    except Exception as e:
        return [["Error", "", "", "", "", "", "", f"IPC error: {e}"]]

def get_unique_values(rows, col_idx):
    return sorted(set(row[col_idx] for row in rows if row[col_idx]))

@app.route('/')
def show_log_table():
    log_rows = fetch_log_array()
    realtime = request.args.get('realtime', 'off') == 'on'
    selected_host = request.args.get('host', '')
    selected_facility = request.args.get('facility', '')
    selected_level = request.args.get('level', '')
    selected_program = request.args.get('program', '')
    selected_pid = request.args.get('pid', '')
    refresh = request.args.get('refresh', 'off')
    msgonly_filter = request.args.get('msgonly_filter', '')
    try:
        num_lines = int(request.args.get('num_lines', str(DEFAULT_NUM_LINES)))
    except Exception:
        num_lines = DEFAULT_NUM_LINES
    if num_lines not in NUM_LINES_OPTIONS:
        num_lines = DEFAULT_NUM_LINES

    log_rows = log_rows[-num_lines:]

    filtered = log_rows
    if selected_host:
        filtered = [r for r in filtered if r[2] == selected_host]
    if selected_facility:
        filtered = [r for r in filtered if r[3] == selected_facility]
    if selected_level:
        filtered = [r for r in filtered if r[4] == selected_level]
    if selected_program:
        filtered = [r for r in filtered if r[5] == selected_program]
    if selected_pid:
        filtered = [r for r in filtered if r[6] == selected_pid]
    if msgonly_filter:
        filtered = [r for r in filtered if msgonly_filter.lower() in r[7].lower()]

    hosts = [v for v in get_unique_values(log_rows, 2) if v]
    facilities = [v for v in get_unique_values(log_rows, 3) if v]
    levels = [v for v in get_unique_values(log_rows, 4) if v]
    programs = [v for v in get_unique_values(log_rows, 5) if v]
    pids = [v for v in get_unique_values(log_rows, 6) if v]

    return render_template(
        'logtable.html',
        rows=filtered,
        total_rows=len(log_rows),
        hosts=hosts,
        facilities=facilities,
        levels=levels,
        programs=programs,
        pids=pids,
        selected_host=selected_host,
        selected_facility=selected_facility,
        selected_level=selected_level,
        selected_program=selected_program,
        selected_pid=selected_pid,
        refresh=refresh,
        realtime=realtime,
        num_lines=num_lines,
        num_lines_options=NUM_LINES_OPTIONS,
        msgonly_filter=msgonly_filter,
        request=request
    )

@app.route('/realtime_api')
def realtime_api():
    log_rows = fetch_log_array()
    selected_host = request.args.get('host', '')
    selected_facility = request.args.get('facility', '')
    selected_level = request.args.get('level', '')
    selected_program = request.args.get('program', '')
    selected_pid = request.args.get('pid', '')
    msgonly_filter = request.args.get('msgonly_filter', '')
    try:
        num_lines = int(request.args.get('num_lines', str(DEFAULT_NUM_LINES)))
    except Exception:
        num_lines = DEFAULT_NUM_LINES
    if num_lines not in NUM_LINES_OPTIONS:
        num_lines = DEFAULT_NUM_LINES

    log_rows = log_rows[-num_lines:]
    filtered = log_rows
    if selected_host:
        filtered = [r for r in filtered if r[2] == selected_host]
    if selected_facility:
        filtered = [r for r in filtered if r[3] == selected_facility]
    if selected_level:
        filtered = [r for r in filtered if r[4] == selected_level]
    if selected_program:
        filtered = [r for r in filtered if r[5] == selected_program]
    if selected_pid:
        filtered = [r for r in filtered if r[6] == selected_pid]
    if msgonly_filter:
        filtered = [r for r in filtered if msgonly_filter.lower() in r[7].lower()]

    hosts = [v for v in get_unique_values(log_rows, 2) if v]
    facilities = [v for v in get_unique_values(log_rows, 3) if v]
    levels = [v for v in get_unique_values(log_rows, 4) if v]
    programs = [v for v in get_unique_values(log_rows, 5) if v]
    pids = [v for v in get_unique_values(log_rows, 6) if v]

    return jsonify({
        "rows": filtered,
        "total_rows": len(log_rows),
        "filters": {
            "hosts": hosts,
            "facilities": facilities,
            "levels": levels,
            "programs": programs,
            "pids": pids,
        }
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=7321)
