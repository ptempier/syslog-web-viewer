#!/usr/bin/env python3
from flask import Flask, render_template_string, request

import re
from collections import Counter

app = Flask(__name__)

# Syslog regex pattern for typical format
SYSLOG_PATTERN = re.compile(
    r'^(\w{3}\s+\d+\s+\d{2}:\d{2}:\d{2})\s+(\S+)\s+([^\[:]+)(?:\[(\d+)\])?:\s?(.*)$'
)

TEMPLATE = '''
<!doctype html>
<html>
  <head>
    <title>Syslog Table Viewer</title>
    <style>
      table { border-collapse: collapse; width: 100%; }
      th, td { border: 1px solid #ccc; padding: 4px; font-family: monospace; }
      th { background: #eee; }
      tr:nth-child(even) { background: #f9f9f9; }
      select { font-family: monospace; }
      form.inline { display: inline; margin: 0; }
    </style>
  </head>
  <body>
    <h2>/var/log/syslog (last {{ total_rows }} entries, {{ rows|length }} shown)</h2>
    <form method="get">
      <table>
        <tr>
          <th>Date/Time</th>
          <th>
            <form method="get" class="inline">
              <select name="host" onchange="this.form.submit()">
                <option value="">[All Hosts]</option>
                {% for v in hosts %}
                  <option value="{{ v }}" {% if v == selected_host %}selected{% endif %}>{{ v }}</option>
                {% endfor %}
              </select>
              {% if selected_host %}<input type="hidden" name="process" value="{{ selected_process }}">{% endif %}
              {% if selected_host %}<input type="hidden" name="pid" value="{{ selected_pid }}">{% endif %}
            </form>
          </th>
          <th>
            <form method="get" class="inline">
              {% if selected_host %}<input type="hidden" name="host" value="{{ selected_host }}">{% endif %}
              <select name="process" onchange="this.form.submit()">
                <option value="">[All Processes]</option>
                {% for v in processes %}
                  <option value="{{ v }}" {% if v == selected_process %}selected{% endif %}>{{ v }}</option>
                {% endfor %}
              </select>
              {% if selected_pid %}<input type="hidden" name="pid" value="{{ selected_pid }}">{% endif %}
            </form>
          </th>
          <th>
            <form method="get" class="inline">
              {% if selected_host %}<input type="hidden" name="host" value="{{ selected_host }}">{% endif %}
              {% if selected_process %}<input type="hidden" name="process" value="{{ selected_process }}">{% endif %}
              <select name="pid" onchange="this.form.submit()">
                <option value="">[All PIDs]</option>
                {% for v in pids %}
                  <option value="{{ v }}" {% if v == selected_pid %}selected{% endif %}>{{ v }}</option>
                {% endfor %}
              </select>
            </form>
          </th>
          <th>Message</th>
        </tr>
        {% for row in rows %}
        <tr>
          <td>{{ row[0] }}</td>
          <td>{{ row[1] }}</td>
          <td>{{ row[2] }}</td>
          <td>{{ row[3] or "" }}</td>
          <td>{{ row[4] }}</td>
        </tr>
        {% endfor %}
      </table>
    </form>
  </body>
</html>
'''

def parse_syslog_line(line):
    m = SYSLOG_PATTERN.match(line)
    if m:
        return m.groups()
    return ("", "", "", "", line.strip())

def get_unique_values(rows, col_idx):
    return sorted(set(row[col_idx] for row in rows if row[col_idx]))

@app.route('/')
def show_syslog_table():
    # Read and parse log
    log_rows = []
    try:
        with open('/var/log/syslog') as f:
            for line in f.readlines()[-100:]:
                log_rows.append(parse_syslog_line(line))
    except Exception as e:
        log_rows = [("Error", "", "", "", str(e))]

    # Filtering
    selected_host = request.args.get('host', '')
    selected_process = request.args.get('process', '')
    selected_pid = request.args.get('pid', '')

    filtered = log_rows
    if selected_host:
        filtered = [r for r in filtered if r[1] == selected_host]
    if selected_process:
        filtered = [r for r in filtered if r[2] == selected_process]
    if selected_pid:
        filtered = [r for r in filtered if r[3] == selected_pid]

    # Possible values for dropdowns
    hosts = get_unique_values(log_rows, 1)
    processes = get_unique_values([r for r in log_rows if (not selected_host or r[1] == selected_host)], 2)
    pids = get_unique_values([r for r in log_rows if (not selected_host or r[1] == selected_host) and (not selected_process or r[2] == selected_process)], 3)
    # Remove empty string if present
    if "" in pids:
        pids.remove("")

    return render_template_string(
        TEMPLATE,
        rows=filtered,
        total_rows=len(log_rows),
        hosts=hosts,
        processes=processes,
        pids=pids,
        selected_host=selected_host,
        selected_process=selected_process,
        selected_pid=selected_pid
    )

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=7321)
